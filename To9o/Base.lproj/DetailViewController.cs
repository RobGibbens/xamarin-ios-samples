// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using CoreSpotlight;

namespace StoryboardTables
{
	public partial class DetailViewController : UIViewController
	{
		Task current {get;set;}
		public RootViewController Delegate {get;set;}

		public DetailViewController (IntPtr handle) : base (handle)
		{
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			SaveButton.TouchUpInside += (sender, e) => {
				current.Name = NameText.Text;
				current.Notes = NotesText.Text;
				current.Done = DoneSwitch.On;
				Delegate.SaveTask(current);
				NavigationController.PopViewController(true);
			};
			CancelButton.TouchUpInside += (sender, e) => {
				if (Delegate != null)
					Delegate.DeleteTask(current);
				else 
					Console.WriteLine("Delegate not set - HACK");
				NavigationController.PopViewController(true);
			};

			NameText.TextAlignment = UITextAlignment.Natural;
			NotesText.TextAlignment = UITextAlignment.Natural;


			UserActivity = iOS9SearchModel.CreateNSUserActivity (current?? new Task());
		}

		// when displaying, set-up the properties
		public override void ViewWillAppear (bool animated)
		{
			base.ViewWillAppear (animated);
			NameText.Text = current.Name;
			NotesText.Text = current.Notes;
			DoneSwitch.On = current.Done;
		}


		// this will be called before the view is displayed 
		public void SetTodo (Task todo) {
			current = todo;
		}

		#region Search & Handoff
		// this gets called periodically after activity.BecomeCurrent() is called
		// //http://www.raywenderlich.com/84174/ios-8-handoff-tutorial
		public override void UpdateUserActivityState (NSUserActivity activity)
		{
			Console.WriteLine ("UpdateUserActivityState for " + activity.Title);
			// update activity 
			if (current != null && current.Name != null && current.Notes != null) {
				activity.AddUserInfoEntries (NSDictionary.FromObjectAndKey (new NSString (current.Name), new NSString ("name")));
				activity.AddUserInfoEntries (NSDictionary.FromObjectAndKey (new NSString (current.Id.ToString ()), new NSString ("id")));
			}
			base.UpdateUserActivityState (activity);
		}
		public override void RestoreUserActivityState (NSUserActivity activity)
		{
			base.RestoreUserActivityState (activity);
			Console.Write ("RestoreUserActivityState ");
			if ((activity.ActivityType == "com.conceptdevelopment.to9o.detail") 
				|| (activity.ActivityType == "com.conceptdevelopment.to9o.new"))
			{
				Console.WriteLine ("NSUserActivity " + activity.ActivityType);
				if (activity.UserInfo == null || activity.UserInfo.Count == 0) {
					// new task Activity
					current = new Task();
				} else {

					var id = activity.UserInfo.ObjectForKey ((NSString)"id").ToString ();

					if (id == "0")
						current = new Task ();
					else
						current = AppDelegate.Current.TaskMgr.GetTask (Convert.ToInt32 (id));
				}
			} 
			if (activity.ActivityType == CSSearchableItem.ActionType) {
				Console.WriteLine ("CSSearchableItem.ActionType");
				var uid = activity.UserInfo [CoreSpotlight.CSSearchableItem.ActivityIdentifier];

				current = AppDelegate.Current.TaskMgr.GetTask (Convert.ToInt32 (uid.Description));

				Console.WriteLine ("eeeeeeee RestoreUserActivityState " + uid);
			}
		}
		#endregion


	}
}
